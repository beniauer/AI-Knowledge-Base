
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ChevronDown, Copy, Eye, Trash2 } from "lucide-react";

interface Faq {
  id: string;
  question: string;
  hits: number;
  lastUpdated: Date;
  tags: string[];
  published: boolean;
  autoGenerated: boolean;
}

interface FaqTableProps {
  faqs: Faq[];
  onPublish: (id: string) => void;
  onMerge: (id: string) => void;
  onDelete: (id: string) => void;
}

const FaqTable = ({ faqs, onPublish, onMerge, onDelete }: FaqTableProps) => {
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("de-DE", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(date);
  };

  return (
    <div className="border rounded-md">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50%]">Frage</TableHead>
            <TableHead className="text-center">Treffer (30 d)</TableHead>
            <TableHead>Zuletzt aktualisiert</TableHead>
            <TableHead>Tags</TableHead>
            <TableHead className="text-right">Aktionen</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {faqs.map((faq) => (
            <TableRow key={faq.id}>
              <TableCell className="font-medium flex items-center gap-2">
                {faq.question}
                {faq.autoGenerated && (
                  <Badge variant="outline" className="ml-2 text-xs">
                    Auto
                  </Badge>
                )}
              </TableCell>
              <TableCell className="text-center">{faq.hits}</TableCell>
              <TableCell>{formatDate(faq.lastUpdated)}</TableCell>
              <TableCell>
                <div className="flex flex-wrap gap-1">
                  {faq.tags.map((tag) => (
                    <Badge key={tag} variant="secondary" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>
              </TableCell>
              <TableCell className="text-right">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm">
                      <span className="sr-only">Aktionen öffnen</span>
                      <ChevronDown size={16} />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={() => onMerge(faq.id)}>
                      <Copy className="mr-2 h-4 w-4" />
                      <span>Zusammenführen</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => onPublish(faq.id)}>
                      <Eye className="mr-2 h-4 w-4" />
                      <span>{faq.published ? "Nicht veröffentlichen" : "Veröffentlichen"}</span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => onDelete(faq.id)}>
                      <Trash2 className="mr-2 h-4 w-4" />
                      <span>Löschen</span>
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};

export default FaqTable;


import { useState } from "react";
import FaqTable from "@/components/faq/FaqTable";
import SearchBar from "@/components/search/SearchBar";
import { toast } from "@/components/ui/sonner";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";

// Sample FAQ data
const sampleFaqs = [
  {
    id: "1",
    question: "Ist der XDR-5000 Pro für Überkopfarbeiten geeignet?",
    hits: 156,
    lastUpdated: new Date(2023, 5, 15),
    tags: ["Bohrschrauber", "Anwendung"],
    published: true,
    autoGenerated: true,
  },
  {
    id: "2",
    question: "Welche Unterschiede gibt es zwischen XDR-5000 Pro und XDR-4000?",
    hits: 132,
    lastUpdated: new Date(2023, 4, 22),
    tags: ["Bohrschrauber", "Vergleich"],
    published: true,
    autoGenerated: true,
  },
  {
    id: "3",
    question: "Wie lange hält der Akku des XDR-5000 Pro?",
    hits: 98,
    lastUpdated: new Date(2023, 3, 10),
    tags: ["Bohrschrauber", "Akku"],
    published: true,
    autoGenerated: false,
  },
  {
    id: "4",
    question: "Welche Schrauben sind für den UW-275 Profil empfohlen?",
    hits: 87,
    lastUpdated: new Date(2023, 2, 5),
    tags: ["Profil", "Schrauben"],
    published: false,
    autoGenerated: false,
  },
  {
    id: "5",
    question: "Wie installiere ich das UW-275 Profil korrekt?",
    hits: 76,
    lastUpdated: new Date(2023, 1, 15),
    tags: ["Profil", "Installation"],
    published: false,
    autoGenerated: true,
  },
];

const Faqs = () => {
  const [faqs, setFaqs] = useState(sampleFaqs);
  const [filteredFaqs, setFilteredFaqs] = useState(sampleFaqs);

  const handleSearch = (query: string) => {
    if (!query) {
      setFilteredFaqs(faqs);
      return;
    }
    
    const filtered = faqs.filter(
      (faq) =>
        faq.question.toLowerCase().includes(query.toLowerCase()) ||
        faq.tags.some((tag) => tag.toLowerCase().includes(query.toLowerCase()))
    );
    
    setFilteredFaqs(filtered);
  };

  const handlePublish = (id: string) => {
    const updatedFaqs = faqs.map((faq) =>
      faq.id === id ? { ...faq, published: !faq.published } : faq
    );
    setFaqs(updatedFaqs);
    setFilteredFaqs(updatedFaqs);
    toast(
      `FAQ ${updatedFaqs.find((f) => f.id === id)?.published ? "veröffentlicht" : "zurückgezogen"}`
    );
  };

  const handleMerge = (id: string) => {
    toast("Zusammenführungsansicht wird geöffnet...");
  };

  const handleDelete = (id: string) => {
    const updatedFaqs = faqs.filter((faq) => faq.id !== id);
    setFaqs(updatedFaqs);
    setFilteredFaqs(updatedFaqs);
    toast("FAQ erfolgreich gelöscht");
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">FAQ Manager</h1>
        <Button className="flex items-center gap-2">
          <PlusCircle size={16} />
          <span>Neue FAQ</span>
        </Button>
      </div>

      <div className="mb-6">
        <SearchBar 
          placeholder="FAQs durchsuchen..." 
          onSearch={handleSearch} 
        />
      </div>

      <FaqTable 
        faqs={filteredFaqs} 
        onPublish={handlePublish}
        onMerge={handleMerge}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Faqs;
